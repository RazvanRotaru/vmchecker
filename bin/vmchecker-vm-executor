#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""A script that starts a vm, reverts it to a known snapshot, tests a
submission bundle (submission + tests), and closes the vm"""

from __future__ import with_statement


# Use simplejson or Python 2.6 json, prefer simplejson.
try:
    import simplejson as json
except ImportError:
    import json


import pyvix.vix
import os
import sys
import logging
import signal
from threading import Thread
from subprocess import Popen

from vmchecker import jsonutil

_logger = logging.getLogger('vm_executor')




def connectToVM(vmx_path):
    """Connect to the VmWare virtual machine specified by the
    vmx_path.

    Returns a pair: (a handle for the connection to the host, a
    virtual machine handle)"""
    h = pyvix.vix.Host()
    vm = h.openVM(vmx_path)
    return (h, vm)


def revertToSnapshot(vm, snapNr):
    """Revert the vm to the snapNr snapshot

    Note: snapshots are counted from 0.
    """
    if vm.nRootSnapshots <= snapNr:
        err_str = ('''Cannot revert to snapshot %d. Too few
                    snapshots (nr = %d) found on %s.''' %
                   (snapNr, vm.nRootSnapshots, vm.vmxPath))
        raise Exception(err_str)
    snaps = vm.rootSnapshots
    vm.revertToSnapshot(snaps[snapNr])


def copyFilesBetweenHostAndGuest(vm, fromHostToGuest, host_dir, guest_dir, files):
    """Copy files from the host to the guest.
    vm        - an open virtual machine.

    fromHostToGuest - boolean:
                      - True: copies files from host to guest
                      - False: copies files from guest to host

    host_dir  - the directory on the host

    guest_dir - an ABSOLUTE path to the guest directory
                This must be expressed in the native system's path
                style. For example if the system is Windows and you
                have installed cygwin, you cannot use cygwin-like
                paths. This myst end with a GUEST speciffic path
                separator (e.g.: bad: 'C:\dir'; good: 'C:\dir\')

    files     - list of files (relative to host_dir) to copy to the vm.
    """

    for f in files:
        host_path = os.path.join(host_dir, f)
        # NOTE: os.path.join() is not good for guest_path because the
        #  guest might be on a different platform with different path
        #  separators. Because of this the guest_dir MUST terminate
        #  with the guest-speciffic path separator!
        guest_path = guest_dir + f
        if fromHostToGuest:
            if not os.path.exists(host_path):
                _logger.error('host file (to send) "%s" does not exist' % host_path)
            else:
                _logger.info('copy file %s from host to guest at %s' %
                             (host_path, guest_path))
                vm.copyFileFromHostToGuest(host_path, guest_path)
        else:
            _logger.info('copy file %s from guest to host at %s' %
                         (guest_path, host_path))
            vm.copyFileFromGuestToHost(guest_path, host_path)
            if not os.path.exists(host_path):
                _logger.error('host file (received) "%s" does not exist' % host_path)




def copyFilesFromGuestToHost(vm, host_dir, guest_dir, files):
    """see copyFilesBetweenHostAndGuest"""
    return copyFilesBetweenHostAndGuest(vm, False, host_dir, guest_dir, files)


def copyFilesFromHostToGuest(vm, host_dir, guest_dir, files):
    """see copyFilesBetweenHostAndGuest"""
    return copyFilesBetweenHostAndGuest(vm, True, host_dir, guest_dir, files)


def makeExecutableAndRun(vm, guest_shell, executable_file, timeout):
    """Make a guest file executables and execute it.

    Copying a file to the vm will not necesarily make it executable
    (on UNIX systems). Therefore we must first make it executable
    (chmod) and then run it. This will be done on Windows systems also
    because we run this in cygwin (for the time being).

    The guest_shell must be specified in a native path style:
      - c:\cygwin\bin\bash.exe - on windows
      - /bin/bash - on UNIX.

    This is needed because vmware tools uses native paths and system
    calls to execute files.

    The executable_file path must the path in the shell for that file.
    """
    args = ' --login -c ' + '"chmod +x ' + executable_file + '; ' + executable_file + '"'
    return runWithTimeout(vm, guest_shell, args, timeout)


def runWithTimeout(vm, prog, args, timeout):
    """ Runs the 'prog' program with 'args' arguments in the 'vm'
    virtual machine instance (assumming it's running correctly).

    Returns True if the thread terminated it's execution withing
    'timeout' seconds (or fractions thereof) and False otherwise.

    """
    try:
        _logger.info('executing on the remote: prog=%s args=[%s] timeout=%d' %
                     (prog, args, timeout))
        thd = Thread(target = vm.runProgramInGuest, args = (prog, args))
        thd.start()
        thd.join(timeout)
        return thd.isAlive()
    except Exception:
        return False


def copy_files_and_run_script(vm, jobs_path, scripts_path, guest, test):
    """Run a test:
       * copy input files to guest
       * copy script files to guest
       * make scripts executable (Linux)
       * execute scripts
       * copy output files from guest

       If at any errors occur, return False.
       On success, return True.

       Parameters:
         vm           - a valid python.vix.VixVM object
         jobs_path    - path to the unzipped bundle, where the tests and
                        submission lie
         scripts_path - paths to the scripts to be executed on the vm
         guest        - an object describing guest configs
         test         - an object describing test  configs
    """
    try:
        copyFilesFromHostToGuest(vm, jobs_path,    guest['root_path']['native_style'], test['input'])
        copyFilesFromHostToGuest(vm, scripts_path, guest['root_path']['native_style'], test['script'])
        for script in test['script']:
            timedout = makeExecutableAndRun(vm, guest['shell'], guest['root_path']['shell_style'] +
                                            guest['root_path']['separator'] + script, test['timeout'])
            copyFilesFromGuestToHost(vm, jobs_path, guest['root_path']['native_style'], test['output'])
            if timedout:
                return False
    finally:
        return True




def start_host_commands(jobs_path, host_commands):
    """Start a set of processes on the host"""
    _logger.info("%%% -- starting host commands")
    for cmdspec in host_commands:
        # skip empty commands.
        if len(cmdspec['cmd']) == 0:
            continue

        cmdspec['std'] = {}
        files = [{'name':'in',  'mode':'r'},
                 {'name':'out', 'mode':'a'},
                 {'name':'err', 'mode':'a'}]

        for f in files:
            fobj = None
            try:
                if len(cmdspec[f['name']]) != 0:
                    fobj = open(os.path.join(jobs_path, cmdspec[f['name']]), f['mode'])
            except:
                _logger.exception('HOSTPROC: opening file ' + f['name'] + ' as ' + f['mode'])
            cmdspec['std'][f['name']] = fobj

        proc = None
        try:
            proc = Popen(cmdspec['cmd'],
                         stdin  = cmdspec['std']['in'],
                         stdout = cmdspec['std']['out'],
                         stderr = cmdspec['std']['err'],
                         shell=True)
        except:
            _logger.exception('HOSTPROC: opening process: ' + cmdspec['cmd'])
        cmdspec['proc'] = proc


def stop_host_commands(host_commands):
    """Start a set of processes on the host"""
    for cmdspec in host_commands:
        # skip empty commands.
        if len(cmdspec['cmd']) == 0:
            continue

        try:
            if cmdspec['proc'] == None:
                continue
            # can't do "proc.terminate()" here because that's python2.6 specific
            os.kill(cmdspec['proc'].pid, signal.SIGTERM)
            for f in cmdspec['std'].values():
                if f != None:
                    try:
                        f.close()
                    except:
                        _logger.exception('HOSTPROC: closing file')
        except:
            _logger.exception('HOSTPROC: killing proc and closing files')
    _logger.info("%%% -- stopped host commands")


def test_submission(args):
    """THE function that tests a submission bundle:
        * opens the vm and reverts to a known snapshot
        * prepares environments and executes all tests
        * manages kernel messages
    """
    _logger.info(args)
    host  = args['host']
    guest = args['guest']
    jobs_path    = os.path.join(host['vmchecker_root'], host['jobs_path'])
    scripts_path = os.path.join(host['vmchecker_root'], host['scripts_path'])

    (h, vm) = connectToVM(host['vmx_path'])
    revertToSnapshot(vm, vm.nRootSnapshots - 1) # revert to the last snapshot
    vm.waitForToolsInGuest()
    vm.loginInGuest(guest['username'], guest['password'])



    # start host commands
    start_host_commands(jobs_path, args['host_commands'])

    try:
        tests = args['test']
        for test in tests:
            success = copy_files_and_run_script(vm, jobs_path, scripts_path, guest, test)
            if not success:
                break # stop running tests if an error occured.
    finally:
        stop_host_commands(args['host_commands'])


def make_testing_configuration():
    """Returns a configuration object for vm-executor testing without
    depending on other scripts"""
    return {
        'km_command' : '',
        'host' : {
            'vmx_path'       : '/home/so/vmware/so-vm-debian-sid/faust.vmx',
            'vmchecker_root' : '/home/lucian/vmchecker/vmchecker/',
            'jobs_path'      : 'executor_jobs/',
            'scripts_path'   : 'executor_scripts/'},
        'guest' : {
            'username'  : 'so',
            'password'  : 'so',
            'shell'     : '/bin/bash',
            'root_path' : {
                'native_style' : '/home/so/',
                'shell_style'  : '/home/so/',
                'separator'    : '/',
                },
            },
        'test'  : [
            {
                'input'  : ['file.zip', 'tests.zip'],
                'script' : ['vmchecker_build.sh'],
                'output' : ['build-stdout.vmr', 'build-stderr.vmr'],
                'timeout': 120
                },
            {
                'input'  : [],
                'script' : ['vmchecker_run.sh'],
                'output' : ['run-stdout.vmr', 'run-stderr.vmr'],
                'timeout': 120
                }
            ]
        }



def main():
    """Main entry point when run as a script; prepares environment for
    test_submission()"""
    logging.basicConfig(level=logging.INFO)

    # if no args specified run a default test
    if len(sys.argv) != 2:
        print 'Usage: %s [--test | config.json]' % sys.argv[0]
        exit(1)
    if sys.argv[1] == '--test':
        test = make_testing_configuration()
    else:
        testcfg_file = sys.argv[1]
        with open(testcfg_file, 'r') as handler:
            test_unicode = json.loads(handler.read())
            test = jsonutil.stringify_json(test_unicode)

    # run the test :)
    test_submission(test)

    # some vmware calls may block indefinetly.  if we don't exit
    # explicitly, we may never return (this is due to python waiting
    # for all threads to exit, but some threads may be stuck in a
    # blocking vmware vix call.
    sys.exit(0)

if __name__ == "__main__":
    main()
