#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""A script that starts a vm, reverts it to a known snapshot, tests a
submission bundle (submission + tests), and closes the vm"""

from __future__ import with_statement


# Use simplejson or Python 2.6 json, prefer simplejson.
try:
    import simplejson as json
except ImportError:
    import json

import os
import imp
import sys
import time
import logging
import signal
from threading import Thread
from subprocess import Popen, PIPE, STDOUT

from vmchecker.config import Config, VirtualMachineConfig
from vmchecker.generic_runner import Runner
from vmchecker.large_runner import LargeRunner
_logger = logging.getLogger('vm_executor')

try:
    from vmchecker.lxc_executor import LXCVM, LXCHost
except:
    _logger.error("Could not load LXC executor")
try:
    from vmchecker.kvm_executor import kvmVM, kvmHost
except:
    _logger.error("Could not load KVM executor")
try:
    from vmchecker.vmware_executor import VmWareVM, VmWareHost
except:
    _logger.error("Could not load VMware executor")
try:
    from vmchecker.one_executor import OneVM, OneHost
except:
    _logger.error("Could not load OpenNebula executor")
    raise


class GenericHost():
    @staticmethod
    def test(bundle_dir):
        needed_files = ['archive.zip', 'tests.zip', 'submission-config']
        sb_cfg_file = os.path.join(bundle_dir, 'submission-config')
        sb_cfg = Config(sb_cfg_file)

        machinecfg = VirtualMachineConfig(sb_cfg, 'Machine')
        if machinecfg.custom_runner() != '':
            needed_files = [ machinecfg.custom_runner() ]
            _check_required_files(bundle_dir, needed_files)

        host = None
        _logger.debug("Testing environment is: " + machinecfg.get_type())
        if machinecfg.get_type() == 'lxc':
            host = LXCHost()
        elif machinecfg.get_type() == 'vmware':
            host = VmWareHost()
        elif machinecfg.get_type() == 'kvm':
            host = kvmHost()
        elif machinecfg.get_type() == 'open-nebula':
            host = OneHost()
        else:
            _logger.error("Invalid testing environment specified.")
            sys.exit(1)

        vm = host.getVM(bundle_dir, sb_cfg)

        runner = None

        # First check if a custom runner was specified
        if machinecfg.custom_runner() != '':
            custom_runner_path = os.path.join(bundle_dir, machinecfg.custom_runner())
            custom_runner = imp.load_source("custom_runner", custom_runner_path)
            runner = custom_runner.get_runner(host, vm)
        elif sb_cfg.get('Assignment', 'assignmentstorage', '').lower() == 'large':
            runner = LargeRunner(host, vm)
        else:
            runner = Runner(host, vm)

        _logger.debug("Using runner: " + runner.__class__.__name__)

        runner.testSubmission(bundle_dir)


def _check_required_files(path, needed_files):
    """Checks that a set of files required by commander is present in
    the given path."""
    found_all = True
    found_files = os.listdir(path)
    not_found = []
    for need in needed_files:
        if not need in found_files:
            _logger.error('Could not find necessary file [%s] in [%s]' % (
                    need, path))
            found_all = False
            not_found.append(need)
    if not found_all:
        raise IOError('Files ' + json.dumps(not_found) + ' required for testing missing')


def main():
    """Main entry point when run as a script.

    Requires as an argument the path to a directory containing a bundle.

    The bundle must have:
      - archive.zip
      - tests.zip
      - submission-config
      - build and run scripts.
    """
    logging.basicConfig(level=logging.DEBUG)

    if len(sys.argv) != 2:
        _logger.error('Usage: %s bundle_dir_location' % sys.argv[0])
        sys.exit(1)

    bundle_dir = sys.argv[1]
    GenericHost.test(bundle_dir)

    # some vmware calls may block indefinetly.  if we don't exit
    # explicitly, we may never return (this is due to python waiting
    # for all threads to exit, but some threads may be stuck in a
    # blocking vmware vix call.
    sys.exit(0)


if __name__ == "__main__":
    main()
