#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""Queue manager - wait for assignments and invoke the commander for each

This module depends on pyinotify: http://pyinotify.sourceforge.net/
For each bundle:
  * listen for new files on a directory,
  * decompress the bundle to a temporary directory,
  * pass path of the directory to commander,
  * waits for the commander to finish.

At startup it checks whether there are any stale jobs and executes them
all as described above.

"""

import sys
import tempfile
import shutil
import os
from pyinotify import WatchManager, Notifier, ProcessEvent, EventsCodes

from vmchecker import ziputil
from vmchecker import commander
from vmchecker.courselist import CourseList
from vmchecker.config import CourseConfig
from vmchecker.paths  import VmcheckerPaths
from vmchecker import vmlogging



_logger = vmlogging.create_script_sdtout_logger()


class _InotifyHandler(ProcessEvent):
    """Dummy class needed to start processing events"""

    def __init__(self, vmpaths):
        self.vmpaths = vmpaths

    def process_IN_CLOSE_WRITE(self, event):
        """Called when a write ends (this means a new
        bundle has arrived). Imediatly start the new job.

        """
        process_job(event.path, event.name, self.vmpaths)


def process_job(path, name, vmpaths):
    """Unzip a bundle archive and call the commander."""
    location = tempfile.mkdtemp(prefix='vmchecker-',
                                dir=vmpaths.dir_tester_unzip_tmp())
    archive = os.path.join(path, name)
    try:
        ziputil.unzip_safely(archive, location)
        commander.prepare_env_and_test(vmpaths.root_path(), location)
    except:
        _logger.exception('Failed to process "%s".' % location)

    _logger.info('Cleaning "%s"' % location)
    shutil.rmtree(location)

    _logger.info('Removing job from the queue')
    os.unlink(archive)


def process_stale_jobs(dir_queue, vmpaths):
    """The queue_manager may die leaving jobs unchecked.
    This function runs the commander for each job found
    in the queue directory at startup.

    """
    stale_jobs = os.listdir(dir_queue)
    if len(stale_jobs) == 0:
        _logger.info('No stale jobs in queue dir "%s"' % dir_queue)
    for stale_job in stale_jobs:
        _logger.info('Processing stale job "%s" in queue dir "%s"' % (
                stale_job, dir_queue))
        process_job(dir_queue, stale_job, vmpaths)


def _callback(watch_manager):
    """XXX: check python documentation about the _callback.
    it receives an instance of the WatchManager.

    TODO.

    """
    _logger.info('Waiting for the next job to arrive')


def start_queue(vmpaths):
    """ Process any stale jobs and register with inotify to wait
    for new jobs to arrive.

    """
    dir_queue = vmpaths.dir_queue()

    # register for inotify envents before processing stale jobs
    watch_manager = WatchManager()
    watch_manager.add_watch(dir_queue, EventsCodes.ALL_FLAGS['IN_CLOSE_WRITE'])
    notifier = Notifier(watch_manager, _InotifyHandler(vmpaths))
    process_stale_jobs(dir_queue, vmpaths)

    # set callback to receive notifications (includes queued jobs after
    # setting up inotify but before we finished processing stale jobs)
    notifier.loop(callback=_callback)


def check_tester_setup_correctly(vmpats):
    """ Sanity check:
        * all needed paths are present
    """
    # check needed paths setup correctly
    for path in vmpats.tester_paths():
        if not os.path.isdir(path):
            _logger.error('"%s" missing. Run `vmchecker-init course tester`!' % path)
            exit(1)

def main():
    """Entry point for the queue manager."""
    if len(sys.argv) <= 1:
        print "course_id parameter required"
        exit(1)
    course_id = sys.argv[1]
    vmcfg = CourseConfig(CourseList().course_config(course_id))
    vmpaths = VmcheckerPaths(vmcfg.root_path())
    check_tester_setup_correctly(vmpaths)
    start_queue(vmpaths)

if __name__ == '__main__':
    main()
