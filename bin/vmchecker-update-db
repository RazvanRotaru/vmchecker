#!/usr/bin/env python

"""Script to manually update the db storring info from the repo"""

import optparse
import sqlite3

from vmchecker import update_db
from vmchecker import repo_walker
from vmchecker import paths
from vmchecker.courselist import CourseList
from vmchecker.config import CourseConfig
from vmchecker import vmlogging


logger = vmlogging.create_script_sdtout_logger()

def _update_db(vmcfg, options, db_cursor):
    """Run an update over the repo as specified in the options
    argument. Store data in the db represented by db_cursor"""
    u = update_db.UpdateDb(vmcfg)
    u.update_db(options, db_cursor)


def add_update_db_optparse(cmdline):
    """Adds vmchecker-update-db speciffic options to an already
    populated family of options.
    """
    group = optparse.OptionGroup(cmdline, 'update_db.py')
    group.add_option('-f', '--force', action='store_true', dest='force',
                     default=False, help='Force updating all marks ignoring '
                     'modification times')
    cmdline.add_option_group(group)


def main():
    """Checks for modified grades and updates the database"""

    # parse and check command line arguments
    cmdline = optparse.OptionParser()
    repo_walker.add_optparse_group(cmdline)
    add_update_db_optparse(cmdline)
    (options, _) = cmdline.parse_args()
    repo_walker.check_arguments(cmdline, options)
    vmcfg = CourseConfig(CourseList().course_config(options.course_id))
    vmpaths = paths.VmcheckerPaths(vmcfg.root_path())

    # open Db
    db_conn = sqlite3.connect(vmpaths.db_file(), isolation_level="EXCLUSIVE")
    db_cursor = db_conn.cursor()

    try:
        # actual work: update according to options the db
        _update_db(vmcfg, options, db_cursor)
    finally:
        db_cursor.close()
        db_conn.commit()
        db_conn.close()





if __name__ == '__main__':
    main()

