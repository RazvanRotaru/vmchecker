#!/usr/bin/env python

"""

A script to download files (that are not stored on vmchecker-storer)
that required for testing from another system through ssh.

"""

from __future__ import with_statement

import os
import sys
import socket
import paramiko


from vmchecker import ziputil
from vmchecker.config import Config, AssignmentConfig



def get_submission_config(bundle_dir):
    """Return the content of the submission config from the bundle"""
    submission_config_file = os.path.join(bundle_dir, 'submission-config')
    return Config(submission_config_file)


def get_external_archive_zip(bundle_dir, sb_cfg):
    """Bring an archive.zip from an external location"""

    if sb_cfg.get('Assignment', 'assignmentstorage', '').lower() != 'large':
        return

    ssh_port = sb_cfg.get('Assignment', 'assignmentstorageport')
    ssh_host = sb_cfg.get('Assignment', 'assignmentstoragehost')
    ssh_user = sb_cfg.get('Assignment', 'AssignmentStorageQueryUser')
    basepath = sb_cfg.get('Assignment', 'AssignmentStorageBasepath')
    account = sb_cfg.get('Assignment', 'user')
    ssh_path = AssignmentConfig.storage_basepath(basepath, account)
    # Initiate SCP session to retrieve archive.zip from the storage

    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.connect((ssh_host, int(ssh_port)))
    transp = paramiko.Transport(sock)
    try:
        transp.start_client()

        rsa_key_name = os.path.join(os.environ['HOME'], '.ssh', 'id_rsa')
        key = paramiko.RSAKey.from_private_key_file(rsa_key_name)
        transp.auth_publickey(ssh_user, key)
        sftp = paramiko.SFTPClient.from_transport(transp)

        external_path = ssh_path + \
            "/" + sb_cfg.get('Assignment', 'user') + \
            "/" + sb_cfg.get('Assignment', 'archivefilename')

        # download the file from the external machine as 'archive.zip'
        sftp.get(external_path, os.path.join(bundle_dir, "archive.zip"))
    finally:
        transp.close()


def expand_archive(bundle_dir, sb_cfg):
    """If required by the assignment config, expand the archive"""

    if not sb_cfg.get_boolean('Assignment', 'UnpackArchive', 'yes'):
        return

    unpack_dir = os.path.join(bundle_dir, 'archive')
    archive_file = os.path.join(bundle_dir, 'archive.zip')

    if not os.path.exists(archive_file):
        return

    ziputil.unzip_safely(archive_file, unpack_dir)


def main():
    """Check if the program is invoked correctly (with a path to the
    bundle directory) and if it needs to bring data from another
    machine. Uses data from the bundle_dir configuration files.

    """

    if len(sys.argv) != 2:
        print 'Usage: ' + sys.argv[0] + ' <bundle_directory>'
        sys.exit(1)

    bundle_dir = sys.argv[1]
    sb_cfg = get_submission_config(bundle_dir)

    get_external_archive_zip(bundle_dir, sb_cfg)

    expand_archive(bundle_dir, sb_cfg)


if __name__ == "__main__":
    main()
